user hab hab;
worker_processes 4;
error_log {{pkg.svc_var_path}}/log/error.log;
# Enviroment variables that we wish to access while running must be declared here,
# otherwise they will not be available.
env REDIS_PASSWORD;
env DATA_COLLECTOR_TOKEN;
daemon off;

events {
  worker_connections 10240;
}

http {
  log_format opscode '$remote_addr - $remote_user [$time_local]  '
                    '"$request" $status "$request_time" $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$upstream_addr" "$upstream_status" "$upstream_response_time" "$http_x_chef_version" "$http_x_ops_sign" "$http_x_ops_userid" "$http_x_ops_timestamp" "$http_x_ops_content_hash" $request_length';

  server_names_hash_bucket_size 128;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  keepalive_timeout 65;

  gzip on;
  gzip_http_version 1.0;
  gzip_comp_level 2;
  gzip_proxied any;
  gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/json;

  include {{pkg.svc_config_path}}/mime.types;

  ## TODO Maybe put this back into a subdir
  lua_package_path "{{pkg.svc_var_path}}/?.lua;$prefix/?.lua;;";
  lua_shared_dict maint_data 1m;
  lua_shared_dict banned_ips 1m;

  # Preload some shared modules globally
  init_by_lua '
    redis = require("resty/redis")
    config = require("config")
    routes = require("routes")
    resolver = require("resolver")
    route_checks = require("route_checks")
    validator = require("validator")

    config.set_maint_refresh_interval(600)
    config.set_ban_refresh_interval(600)
    config.set_default_org(false)
  ';

  # Listen for local requests to the stub_status module.
  server {
    listen 127.0.0.1:9999;
    location /nginx_status {
      stub_status on;
      access_log   off;
      allow 127.0.0.1;
      deny all;
    }
  }

  upstream opscode_erchef {
    {{#if bind.has_opscode_erchef}}		
      server {{bind.opscode_erchef.first.sys.ip}}:{{bind.opscode_erchef.first.cfg.port}}
    {{/if}
  }
  upstream oc_bifrost {
    {{#if bind.has_oc_bifrost}}		
      server {{bind.oc_bifrost.first.sys.ip}}:{{bind.oc_bifrost.first.cfg.port}}
    {{/if}
  }
  upstream opscode_solr4 {
    {{#if bind.has_elasticsearch}}		
      server {{bind.elasticsearch.first.sys.ip}}:{{bind.elasticsearch.first.cfg.http-port}}
    {{/if}
  }
  upstream bookshelf {
    {{#if bind.has_bookshelf}}		
      server {{bind.bookshelf.first.sys.ip}}:{{bind.bookshelf.first.cfg.port}}
    {{/if}
  }



  # Include upstream definitions for addons
  include /var/opt/opscode/nginx/etc/addon.d/*_upstreams.conf;

  fastcgi_temp_path "{{pkg.svc_config_path}}/tmp/fastcgi";
  client_body_temp_path "{{pkg.svc_config_path}}/tmp/client_body";
  uwsgi_temp_path "{{pkg.svc_config_path}}/tmp/uwsgi";
  scgi_temp_path "{{pkg.svc_config_path}}/tmp/scgi";

  # external lb config for Chef API
    proxy_cache_path  {{pkg.svc_data_path}}/cache/webui levels=1:2 keys_zone=webui-cache:50m max_size=5000m inactive=600m;
    proxy_cache_path  {{pkg.svc_data_path}}/cache/cookbooks levels=1:2 keys_zone=cookbooks:50m max_size=5000m inactive=600m;
    proxy_temp_path {{pkg.svc_data_path}}/cache-tmp;

    # We support three options: serve nothing on non_ssl_port (80),
    # redirect to https, or actually serve the API.
          server {
            listen 80;
            access_log "{{pkg.svc_config_path}}/log/rewrite-port-80.log;
            return 301 https://$host$request_uri;
          }

    # Chef HTTPS API
    include {{pkg.svc_config_path}}/chef_https_lb.conf;

  # internal lb config for Chef API Services
  server {
    listen 9680;
    # The name doesn't matter; this is the only listener on this port
    server_name api.chef-server.dev;

    client_max_body_size 250m;
    proxy_set_header        Host            $host;
    proxy_set_header        X-Real-IP       $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto http;
    proxy_set_header        X-Forwarded-Host $http_host;
    proxy_pass_request_headers on;
    proxy_connect_timeout   90;
    proxy_send_timeout      90;
    proxy_read_timeout      90;

    access_log {{pkg.svc_config_path}}/log/internal-chef.access.log opscode;
    error_log  {{pkg.svc_config_path}}/log/internal-chef.error.log;

    # Include internal routes for addons
    # HABITAT: ADDONS DISABLED FOR NOW
    # include /var/opt/opscode/nginx/etc/addon.d/*_internal.conf;

    location "/" {
      set $upstream "";
      set $mode "internal_chef";
      rewrite_by_lua_file '"{{pkg.svc_config_path}}/dispatch.lua';

      proxy_redirect http://$upstream /;
      proxy_pass http://$upstream;
    }
  }

  # internal service access for oc_bifrost
  server {
    listen 9683;
    server_name api.chef-server.dev;

    client_max_body_size 250m;
    proxy_set_header        Host            $host;
    proxy_set_header        X-Real-IP       $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto http;
    proxy_set_header        X-Forwarded-Host $http_host;
    proxy_pass_request_headers on;

    proxy_connect_timeout   90;
    proxy_send_timeout      90;
    proxy_read_timeout      90;

    access_log {{pkg.svc_config_path}}/log/internal-authz.access.log opscode;
    error_log  {{pkg.svc_config_path}}/log/internal-authz.error.log;

    location / {
      proxy_pass http://oc_bifrost;
    }
  }

  # HABITAT: ADDONS DISABLED FOR NOW
  # include /var/opt/opscode/nginx/etc/nginx.d/*.conf;
}
